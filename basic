#include <iostream>
#include <vector>
#include <string>
using namespace std;

struct File {
    string filename;
    string uploaderRole; // "Student" or "Faculty"
};

class Student {
public:
    string name;
    int rollNo;
    float cgpa;
    int attendance;
    vector<File> uploadedFiles;

    Student(string n, int r, float c, int a) : name(n), rollNo(r), cgpa(c), attendance(a) {}

    void uploadFile(const string& fname) {
        uploadedFiles.push_back({fname, "Student"});
        cout << "Student uploaded file: " << fname << endl;
    }

    void viewAttendance() {
        cout << "Attendance for " << name << ": " << attendance << "%" << endl;
    }

    void viewCGPA() {
        cout << "CGPA for " << name << ": " << cgpa << endl;
    }
};

class Faculty {
private:
    string passkey; // Passkey for access
public:
    string name;
    vector<File> uploadedFiles;

    Faculty(string n, const string& key) : name(n), passkey(key) {}

    bool verifyPasskey(const string& key) {
        return key == passkey;
    }

    void uploadFile(const string& fname) {
        uploadedFiles.push_back({fname, "Faculty"});
        cout << "Faculty uploaded file: " << fname << endl;
    }

    void viewStudentFiles(const vector<Student>& students) {
        cout << "Files uploaded by students:\n";
        for (const auto& s : students) {
            for (const auto& f : s.uploadedFiles) {
                cout << "- " << f.filename << " (by " << s.name << ")\n";
            }
        }
    }
};

class HOD {
private:
    string passkey; // Passkey for access
public:
    string name;
    HOD(string n, const string& key) : name(n), passkey(key) {}

    bool verifyPasskey(const string& key) {
        return key == passkey;
    }

    void viewAllStudentData(const vector<Student>& students) {
        cout << "All student data:\n";
        for (const auto& s : students) {
            cout << "Name: " << s.name << ", Roll: " << s.rollNo
                 << ", CGPA: " << s.cgpa << ", Attendance: " << s.attendance << "%\n";
        }
    }

    void viewAllFacultyData(const vector<Faculty>& faculties) {
        cout << "All faculty data:\n";
        for (const auto& f : faculties) {
            cout << "Name: " << f.name << endl;
        }
    }

    void viewAllFiles(const vector<Student>& students, const vector<Faculty>& faculties) {
        cout << "All uploaded files:\n";
        for (const auto& s : students) {
            for (const auto& f : s.uploadedFiles) {
                cout << "- " << f.filename << " (by " << s.name << ")\n";
            }
        }
        for (const auto& f : faculties) {
            for (const auto& file : f.uploadedFiles) {
                cout << "- " << file.filename << " (by " << f.name << ")\n";
            }
        }
    }
};

int main() {
    // Initialize with passkeys
    vector<Student> students = { Student("Alice", 1, 9.1, 95), Student("Bob", 2, 8.5, 88) };
    vector<Faculty> faculties = { Faculty("Dr. Smith", "faculty123"), Faculty("Prof. Lee", "faculty456") };
    HOD hod("Dr. Head", "hodpass");

    string inputPasskey;
    int roleChoice;
    while (true) {
        cout << "\nSelect Role:\n1. Student\n2. Faculty\n3. HOD\n0. Exit\nChoice: ";
        cin >> roleChoice;
        if (roleChoice == 0) break;

        if (roleChoice == 1) {
            int idx;
            cout << "Enter student index (0 or 1): "; cin >> idx;
            students[idx].uploadFile("studentfile.txt");
            students[idx].viewAttendance();
            students[idx].viewCGPA();
        } else if (roleChoice == 2) {
            int idx;
            cout << "Enter faculty index (0 or 1): "; cin >> idx;
            cout << "Enter passkey for " << faculties[idx].name << ": ";
            cin >> inputPasskey;
            if (faculties[idx].verifyPasskey(inputPasskey)) {
                faculties[idx].uploadFile("facultyfile.txt");
                faculties[idx].viewStudentFiles(students);
            } else {
                cout << "Invalid passkey.\n";
            }
        } else if (roleChoice == 3) {
            cout << "Enter HOD passkey: ";
            cin >> inputPasskey;
            if (hod.verifyPasskey(inputPasskey)) {
                hod.viewAllStudentData(students);
                hod.viewAllFacultyData(faculties);
                hod.viewAllFiles(students, faculties);
            } else {
                cout << "Invalid passkey.\n";
            }
        }
    }
    return 0;
}
